name: CI for stripe-samples/accept-a-payment
on: [push, pull_request]

env:
  STRIPE_PUBLISHABLE_KEY: ${{ secrets.TEST_STRIPE_PUBLISHABLE_KEY }}
  STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}

jobs:
  server_test:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        runtime:
          - server_type: ruby
            server_image: ruby:3.0
          - server_type: ruby
            server_image: ruby:2.6
          - server_type: node
            server_image: node:14.17
          - server_type: node
            server_image: node:12.22
          - server_type: python
            server_image: python:3.9
          - server_type: python
            server_image: python:3.6
          - server_type: java
            server_image: maven:3.8-openjdk-16
          - server_type: java
            server_image: maven:3.8-openjdk-8
          - server_type: go
            server_image: golang:1.16
          - server_type: go
            server_image: golang:1.15
          - server_type: dotnet
            server_image: mcr.microsoft.com/dotnet/sdk:5.0
          - server_type: dotnet
            server_image: mcr.microsoft.com/dotnet/sdk:3.1
        target:
          - sample: custom-payment-flow
            tests: custom_payment_flow_server_spec.rb
          - sample: prebuilt-checkout-page
            tests: prebuilt_checkout_page_spec.rb
        include:
          - runtime:
              server_type: node-typescript
              server_image: node:14.17
            target:
              sample: custom-payment-flow
              tests: custom_payment_flow_server_spec.rb
          - runtime:
              server_type: node-typescript
              server_image: node:12.22
            target:
              sample: custom-payment-flow
              tests: custom_payment_flow_server_spec.rb
    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: 'stripe-samples/sample-ci'
          path: 'sample-ci'
          ref: 'multiple-runtimes'

      - name: Setup dependencies
        run: |
          source sample-ci/helpers.sh
          setup_dependencies

      - name: Run tests
        run: |
          source sample-ci/helpers.sh

          install_docker_compose_settings
          export STRIPE_WEBHOOK_SECRET=$(retrieve_webhook_secret)
          cat <<EOF >> .env
            DOMAIN=http://web:4242
            PRICE=${{ secrets.TEST_PRICE }}
            PAYMENT_METHOD_TYPES="card"
          EOF

          configure_docker_compose_for_integration "${{ matrix.target.sample }}" "${{ matrix.runtime.server_type }}" ../../client/html "${{ matrix.runtime.server_image }}"

          docker-compose up -d && wait_web_server
          docker-compose exec -T runner bundle exec rspec spec/${{ matrix.target.tests }}

      - name: Collect debug information
        if: ${{ failure() }}
        run: |
          cat .env
          cat docker-compose.yml
          docker-compose ps -a
          docker-compose logs web

  e2e_test:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        implementation:
          - client_type: html
            server_url: http://web:4242
            profile: e2e
          - client_type: react-cra
            server_url: http://frontend:3000
            profile: frontend
        target:
          - sample: custom-payment-flow
            tests: custom_payment_flow_e2e_spec.rb
          - sample: prebuilt-checkout-page
            tests: prebuilt_checkout_page_e2e_spec.rb
    env:
      SERVER_URL: ${{ matrix.implementation.server_url }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: 'stripe-samples/sample-ci'
          path: 'sample-ci'
          ref: 'multiple-runtimes'

      - name: Setup dependencies
        run: |
          source sample-ci/helpers.sh
          setup_dependencies

      - name: Prepare tests
        run: |
          echo "$(cat ${{ matrix.target.sample }}/client/react-cra/package.json | jq '.proxy = "http://web:4242"')" > ${{ matrix.target.sample }}/client/react-cra/package.json

      - name: Run tests
        run: |
          source sample-ci/helpers.sh

          install_docker_compose_settings
          export STRIPE_WEBHOOK_SECRET=$(retrieve_webhook_secret)
          cat <<EOF >> .env
          DOMAIN=${{ matrix.implementation.server_url }}
          PRICE=${{ secrets.TEST_PRICE }}
          PAYMENT_METHOD_TYPES="card"
          EOF

          configure_docker_compose_for_integration "${{ matrix.target.sample }}" node ../../client/${{ matrix.implementation.client_type }} node:14.17
          docker-compose --profile="${{ matrix.implementation.profile }}" up -d && wait_web_server
          command="docker-compose exec -T runner bundle exec rspec spec/${{ matrix.target.tests }}"
          $command \
            || $command --only-failures \
            || $command --only-failures --format RSpec::Github::Formatter --format progress

      - name: Collect debug information
        if: ${{ failure() }}
        run: |
          cat .env
          cat docker-compose.yml
          docker-compose ps -a
          docker-compose --profile="${{ matrix.implementation.profile }}" logs web

          docker cp $(docker-compose ps -qa runner | head -1):/work/tmp .

      - name: Upload capybara screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: screenshots
          path: |
            tmp/capybara

  android_build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cd custom-payment-flow/client/android-kotlin
          ./gradlew build

  ios_build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cd custom-payment-flow/client/ios-swiftui
          pod install
          xcodebuild build \
                     -scheme AcceptAPayment \
                     -workspace AcceptAPayment.xcworkspace/ \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED="NO" \
                     CODE_SIGN_ENTITLEMENTS="" \
                     CODE_SIGNING_ALLOWED="NO"
